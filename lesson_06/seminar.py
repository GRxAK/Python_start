# Задачка: 1
# Даны два массива чисел. Требуется вывести те элементы
# первого массива (в том порядке, в каком они идут в первом
# массиве), которых нет во втором массиве. Пользователь вводит
# число N - количество элементов в первом массиве, затем N
# чисел - элементы массива. Затем число M - количество
# элементов во втором массиве. Затем элементы второго массива
# Ввод:                 Вывод:
# 7                     3 3 2 12
# 3 1 3 4 2 4 12
# 6
# 4 15 43 1 15 1 (каждое число вводится с новой строки)

# one_len = int(input("Количество элементов первого списка: "))
# one_list = [int(input(f'Введите число "{i}" :')) for i in range(one_len)]
# two_len = int(input("Количество элементов второго списка: "))
# two_list = [int(input(f'Введите число "{i}" :')) for i in range(two_len)]
# # one_list = [3, 1, 3, 4, 2, 4, 12]
# # two_list = [4, 15, 43, 1, 15, 1]
# print(one_list)
# print(two_list)

# def search_unique (list_1, list_2):
#     result = []
#     for item_1 in list_1:
#         numb_found = False
#         for item_2 in list_2:
#             if item_1 == item_2:
#                 numb_found = True
#                 break
#         if  not numb_found:
#             result.append(item_1)
#     return result

# print(search_unique(one_list, two_list))

# Задачка: 2
# Дан массив, состоящий из целых чисел. Напишите
# программу, которая в данном массиве определит
# количество элементов, у которых два соседних и, при
# этом, оба соседних элемента меньше данного. Сначала
# вводится число N — количество элементов в массиве
# Далее записаны N чисел — элементы массива. Массив
# состоит из целых чисел.
# Ввод:         Ввод:
# 5             5
# 1 2 3 4 5     1 5 1 5 1
# Вывод:        Вывод:
# 0             2
# (каждое число вводится с новой строки)

# list_len = int(input("Введите длинну списка: "))
# list = [int(input(f'Введите "{i}" элемент списка: ')) for i in range(list_len)]
# # list = "1 5 1 5 1 4 5 4".split()
# print(list)

# def same_neighbors(list):
#     result = 0
#     for i in range(1, len(list) - 1):
#         if list[i - 1] == list[i + 1] and list[i-1] < list[i]:
#             result += 1
#     return result
# print(same_neighbors(list))


# Задачка: 3
# Дан список чисел. Посчитайте, сколько в нем пар
# элементов, равных друг другу. Считается, что любые
# два элемента, равные друг другу образуют одну пару,
# которую необходимо посчитать. Вводится список
# чисел. Все числа списка находятся на разных
# строках.
# Ввод:         Вывод:
# 1 2 3 2 3     2

# list = input("Введите числа через проблел: ").split()
# print(list)

# def search_couples(list):
#     lst_bool = [True] * len(list)
#     count = 0
#     for i in range(len(list) - 1):
#         for j in range(i + 1, len(list)):
#             if list[i] == list[j] and lst_bool[i] and lst_bool[j]:
#                 count += 1
#                 lst_bool[i] = False
#                 lst_bool[j] = False
#     return count
# print(search_couples(list))

# Задачка: 4
# Два различных натуральных числа n и m называются
# дружественными, если сумма делителей числа n
# (включая 1, но исключая само n) равна числу m и
# наоборот. Например, 220 и 284 – дружественные числа.
# По данному числу k выведите все пары дружественных
# чисел, каждое из которых не превосходит k. Программа
# получает на вход одно натуральное число k, не
# превосходящее 105
# . Программа должна вывести все
# пары дружественных чисел, каждое из которых не
# превосходит k. Пары необходимо выводить по одной в
# строке, разделяя пробелами. Каждая пара должна быть
# выведена только один раз (перестановка чисел новую
# пару не дает).
#       Ввод:       Вывод:
#       300         220 284

# def summ_of_dividers(number: int) -> int:
#     result = 0
#     for i in range(1, number//2+1):
#         if number % i == 0:
#             result += i
#     return result

# k = int(input("Р’РІРµРґРёС‚Рµ С‡РёСЃР»Рѕ: "))
# for i in range(k):
#     for j in range(i+1, k):
#         if summ_of_dividers(i) == j and summ_of_dividers(j) == i:
#             print(f"{i} {j}")

